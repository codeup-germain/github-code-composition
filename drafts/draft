{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "803ff2d3",
   "metadata": {},
   "source": [
    "# The imports i need "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "bd679286",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import unicodedata\n",
    "import re\n",
    "import json\n",
    "\n",
    "import nltk\n",
    "from nltk.tokenize.toktok import ToktokTokenizer\n",
    "from nltk.corpus import stopwords\n",
    "from nltk import sent_tokenize\n",
    "from prepare import prepare\n",
    "\n",
    "import sklearn.preprocessing\n",
    "import warnings\n",
    "import re\n",
    "\n",
    "from scipy import stats\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "warnings.filterwarnings('ignore')\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "# imports for modeling\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.naive_bayes import MultinomialNB\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.naive_bayes import MultinomialNB\n",
    "from sklearn.svm import LinearSVC\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.metrics import classification_report, confusion_matrix, recall_score, plot_confusion_matrix\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn import svm\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.feature_selection import RFE\n",
    "from model import  vectorizer_split, tfidf_split, test_a_model, make_models_and_print_metrics_test_data, print_metrics"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cda59270",
   "metadata": {},
   "source": [
    "# Josh you shouldnt need the following 3 Cells"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "0bb6ceb3",
   "metadata": {},
   "outputs": [],
   "source": [
    "with open('data.json') as json_file:\n",
    "    data = json.load(json_file)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b670ba3b",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.DataFrame(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ceb086af",
   "metadata": {},
   "outputs": [],
   "source": [
    "train,validate,test = prepare(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0379f7e5",
   "metadata": {},
   "source": [
    "# Josh you can start here"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "53265267",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Baseline Accuracy:C# 31%\n"
     ]
    }
   ],
   "source": [
    "#Create a baseline model\n",
    "#Create a baseline model\n",
    "print(f'Baseline Accuracy:{train.language.value_counts().idxmax()} {round(max(train.language.value_counts()) / train.shape[0] *100)}%' )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "80deaa2d",
   "metadata": {},
   "source": [
    "The cell above shows C# is the most commonly occuring langauge at 31% this will serve as our baseline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "25e3ff0f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creating a Dataframe to hold all of our scores\n",
    "score_df = pd.DataFrame(columns = ['model_name', 'train_score', 'validate_score'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0f470ec6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creating our y train, validate and test\n",
    "y_train = train.language\n",
    "y_validate = validate.language\n",
    "y_test = test.language\n",
    "# Creating our x train validate and test using a function that \n",
    "# performs count vectorization on stemmed data\n",
    "X_train,X_validate,X_test = vectorizer_split('stemmed')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8cc24fa1",
   "metadata": {},
   "source": [
    "Could not get the following function to work properly when importing "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "7db86aee",
   "metadata": {},
   "outputs": [],
   "source": [
    "def run_models():\n",
    "    #Decision Tree\n",
    "    ## Create a for loop that creates 20 decision tree models with increasingly larger depths.\n",
    "    metrics = []\n",
    "    tree_models = []\n",
    "    for i in range(2, 22):\n",
    "        # Make the model\n",
    "        tree = DecisionTreeClassifier(max_depth=i, random_state=123)\n",
    "\n",
    "        # Fit the model (on train and only train)\n",
    "        tree = tree.fit(X_train, y_train)\n",
    "        y_predictions = tree.predict(X_train)\n",
    "        y_pred = tree.predict(X_validate)\n",
    "        # Use the model\n",
    "        in_sample_accuracy = round(tree.score(X_train, y_train),3)\n",
    "    \n",
    "        out_of_sample_accuracy = round(tree.score(X_validate, y_validate),3)\n",
    "        \n",
    "        in_sample_recall = round(sklearn.metrics.recall_score(y_train, y_predictions, pos_label=0, average='micro'),3)\n",
    "        \n",
    "        out_of_sample_recall = round(sklearn.metrics.recall_score(y_validate, y_pred, pos_label =0, average='micro'),3)\n",
    "        output = {\n",
    "            \"max_depth\": i,\n",
    "            \"train_accuracy\": in_sample_accuracy,\n",
    "            \"validate_accuracy\": out_of_sample_accuracy,\n",
    "            \"train_recall\": in_sample_recall,\n",
    "            \"validate_recall\": out_of_sample_recall\n",
    "        }\n",
    "        \n",
    "        # This creates the df below\n",
    "        metrics.append(output)\n",
    "        # tree_models will store all of my tree models incase i want them later\n",
    "        tree_models.append(tree)\n",
    "        \n",
    "    tree_df = pd.DataFrame(metrics)\n",
    "    tree_df[\"accuracy_difference\"] = tree_df.train_accuracy - tree_df.validate_accuracy    \n",
    "    \n",
    "    # Random Forest\n",
    "    ## Create a for loop that creates 20 Random Forrest models with increasingly larger depths.\n",
    "    metrics2 = []\n",
    "    forest_models = []\n",
    "    for i in range(2, 22):\n",
    "        # Make the model\n",
    "        forest = RandomForestClassifier(max_depth=i, random_state=123)\n",
    "    \n",
    "        # Fit the model (on train and only train)\n",
    "        forest = forest.fit(X_train, y_train)\n",
    "        \n",
    "        y_predictions = forest.predict(X_train)\n",
    "        y_pred = forest.predict(X_validate)\n",
    "        \n",
    "        # Use the model\n",
    "        in_sample_accuracy = round(forest.score(X_train, y_train),3)\n",
    "        \n",
    "        out_of_sample_accuracy = round(forest.score(X_validate, y_validate),3)\n",
    "        \n",
    "        in_sample_recall = round(sklearn.metrics.recall_score(y_train, y_predictions, pos_label =0, average='micro'),3)\n",
    "        \n",
    "        out_of_sample_recall = round(sklearn.metrics.recall_score(y_validate, y_pred, pos_label =0, average='micro'),3)\n",
    "        \n",
    "        output = {\n",
    "            \"max_depth\": i,\n",
    "            \"train_accuracy\": in_sample_accuracy,\n",
    "            \"validate_accuracy\": out_of_sample_accuracy,\n",
    "            \"train_recall\": in_sample_recall,\n",
    "            \"validate_recall\": out_of_sample_recall\n",
    "        }\n",
    "        \n",
    "        # This creates the df below\n",
    "        metrics2.append(output)\n",
    "        # tree_models will store all of my tree models incase i want them later\n",
    "        forest_models.append(forest)\n",
    "        \n",
    "        \n",
    "        \n",
    "    forest_df = pd.DataFrame(metrics2)\n",
    "    forest_df[\"accuracy_difference\"] = forest_df.train_accuracy - forest_df.validate_accuracy\n",
    "    \n",
    "\n",
    "    knn_metrics = []\n",
    "    knn_models = []\n",
    "    # loop through different values of k\n",
    "    for k in range(1, 21):\n",
    "            \n",
    "        # define the thing\n",
    "        knn = KNeighborsClassifier(n_neighbors=k)\n",
    "        \n",
    "        # fit the thing (remmeber only fit on training data)\n",
    "        knn.fit(X_train, y_train)\n",
    "        \n",
    "        y_predictions = knn.predict(X_train)\n",
    "        y_pred = knn.predict(X_validate)\n",
    "        # use the thing (calculate accuracy)\n",
    "        train_accuracy = round(knn.score(X_train, y_train),3)\n",
    "        validate_accuracy = round(knn.score(X_validate, y_validate),3)\n",
    "        train_recall = round(sklearn.metrics.recall_score(y_train, y_predictions, pos_label =0,average='micro'),3)\n",
    "        validate_recall = round(sklearn.metrics.recall_score(y_validate, y_pred, pos_label =0,average='micro'),3)\n",
    "        output = {\n",
    "            \"k\": k,\n",
    "            \"train_accuracy\": train_accuracy,\n",
    "            \"validate_accuracy\": validate_accuracy,\n",
    "            'train_recall':train_recall,\n",
    "            \"validate_recall\":validate_recall\n",
    "        }\n",
    "        \n",
    "        knn_metrics.append(output)\n",
    "        knn_models.append(knn)\n",
    "        # make a dataframe\n",
    "    \n",
    "    knn_df = pd.DataFrame(knn_metrics)\n",
    "    knn_df[\"accuracy_difference\"] = knn_df.train_accuracy - knn_df.validate_accuracy\n",
    "        \n",
    "    \n",
    "    return tree_models, forest_models,knn_models, tree_df, forest_df, knn_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "df3ae4e6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Run multiple variations of KNN, Decision Trees, and Random Forest\n",
    "# with differing variationds of neighbors, branches, and trees\n",
    "# saved those models to the coresponding dataframes so the best \n",
    "# performer could be called upon\n",
    "tree_models, forest_models,knn_models, tree_df, forest_df, knn_df = run_models()\n",
    "\n",
    "from sklearn import svm\n",
    "\n",
    "# make a list of algorithms we want to try for our models\n",
    "model_list = [MultinomialNB(), LinearSVC(), tree_models[tree_df.validate_accuracy.idxmax()], forest_models[forest_df.accuracy_difference.idxmin()], knn_models[knn_df.validate_accuracy.idxmax()], LogisticRegression(), svm.SVC(C= 2, decision_function_shape='ovo')]\n",
    "\n",
    "# name the models\n",
    "model_names = ['Naive_Bayes_stemmed_CV', 'SVC_stemmed_CV', 'Decision_tree_stemmed_CV', 'Random_forest_stemmed_CV', 'KNN_stemmed_CV', 'Log_reg_stemmed_CV','SVC_OVO_stemmed_CV']\n",
    "# Run the models\n",
    "for model, name in zip(model_list, model_names):\n",
    "    score_df = test_a_model(X_train, y_train, X_validate, y_validate, model, name, score_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a373c15b",
   "metadata": {},
   "source": [
    "This process is iterative, it will be peromed the exact same way for each variation of stemmed and lemmatized as well as the differing vectorizations of TFIDF and count vectorization. All results are being saved to the data frame score_df. In a seperate notebook each of the models where closely analyzed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e4b6f403",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creating our x train validate and test using a function that \n",
    "# performs count vectorization on lemmatized data\n",
    "X_train,X_validate,X_test = vectorizer_split('lemmatized')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "3dd056da",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Run multiple variations of KNN, Decision Trees, and Random Forest\n",
    "# with differing variationds of neighbors, branches, and trees\n",
    "# saved those models to the coresponding dataframes so the best \n",
    "# performer could be called upon\n",
    "tree_models, forest_models,knn_models, tree_df, forest_df, knn_df = run_models()\n",
    "\n",
    "from sklearn import svm\n",
    "\n",
    "# make a list of algorithms we want to try for our models\n",
    "model_list = [MultinomialNB(), LinearSVC(), tree_models[tree_df.validate_accuracy.idxmax()], forest_models[forest_df.accuracy_difference.idxmin()], knn_models[knn_df.validate_accuracy.idxmax()], LogisticRegression(), svm.SVC(C= 2, decision_function_shape='ovo')]\n",
    "\n",
    "# name the models\n",
    "model_names = ['Naive_Bayes_lemmatized_CV', 'SVC_lemmatized_CV', 'Decision_tree_lemmatized_CV', 'Random_forest_lemmatized_CV', 'KNN_lemmatized_CV', 'Log_reg_lemmatized_CV','SVC_OVO_lemmatized_CV']\n",
    "\n",
    "# Run the models\n",
    "for model, name in zip(model_list, model_names):\n",
    "    score_df = test_a_model(X_train, y_train, X_validate, y_validate, model, name, score_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "d2e7e25c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creating our x train validate and test using a function that \n",
    "# performs TFIDF vectorization on stemmed data\n",
    "X_train,X_validate,X_test = tfidf_split('stemmed')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "9034634e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Run multiple variations of KNN, Decision Trees, and Random Forest\n",
    "# with differing variationds of neighbors, branches, and trees\n",
    "# saved those models to the coresponding dataframes so the best \n",
    "# performer could be called upon\n",
    "tree_models, forest_models,knn_models, tree_df, forest_df, knn_df = run_models()\n",
    "\n",
    "from sklearn import svm\n",
    "\n",
    "# make a list of algorithms we want to try for our models\n",
    "model_list = [MultinomialNB(), LinearSVC(), DecisionTreeClassifier(), forest_models[forest_df.accuracy_difference.idxmin()], knn_models[knn_df.validate_accuracy.idxmax()], LogisticRegression(), svm.SVC(C= 2, decision_function_shape='ovo')]\n",
    "\n",
    "# name the models\n",
    "model_names = ['Naive_Bayes_stemmed_TFIDF', 'SVC_stemmed_TFIDF', 'Decision_tree_stemmed_TFIDF', 'Random_forest_stemmed_TFIDF', 'KNN_bigrams_stemmed_TFIDF', 'Log_reg_stemmed_TFIDF','SVC_OVO_stemmed_TFIDF']\n",
    "\n",
    "# Run the models\n",
    "for model, name in zip(model_list, model_names):\n",
    "    score_df = test_a_model(X_train, y_train,X_validate, y_validate, model, name, score_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b31520a0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creating our x train validate and test using a function that \n",
    "# performs TFIDF vectorization on lemmatized data\n",
    "X_train,X_validate,X_test = tfidf_split('lemmatized')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "0c6b9c24",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Run multiple variations of KNN, Decision Trees, and Random Forest\n",
    "# with differing variationds of neighbors, branches, and trees\n",
    "# saved those models to the coresponding dataframes so the best \n",
    "# performer could be called upon\n",
    "tree_models, forest_models,knn_models, tree_df, forest_df, knn_df = run_models()\n",
    "\n",
    "from sklearn import svm\n",
    "\n",
    "# make a list of algorithms we want to try for our models\n",
    "model_list = [MultinomialNB(), LinearSVC(), tree_models[tree_df.validate_accuracy.idxmax()], forest_models[forest_df.validate_accuracy.idxmax()], knn_models[knn_df.validate_accuracy.idxmax()], LogisticRegression(), svm.SVC(C= 2, decision_function_shape='ovo')]\n",
    "\n",
    "# name the models\n",
    "model_names = ['Naive_Bayes_lemmatized_TFIDF', 'SVC_lemmatized_TFIDF', 'Decision_tree_lemmatized_TFIDF', 'Random_forest_lemmatized_TFIDF', 'KNN_lemmatized_TFIDF', 'Log_reg_lemmatized_TFIDF','SVC_OVO_lemmatized_TFIDF']\n",
    "\n",
    "# Run the models\n",
    "for model, name in zip(model_list, model_names):\n",
    "    score_df = test_a_model(X_train, y_train, X_validate, y_validate, model, name, score_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "6767c29c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creating a column to show us the difference between train and validate accuracy \n",
    "score_df[\"accuracy_difference\"] = score_df.train_score - score_df.validate_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "c84afeee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style  type=\"text/css\" >\n",
       "#T_fef91_row0_col2,#T_fef91_row5_col3{\n",
       "            background-color:  yellow;\n",
       "        }</style><table id=\"T_fef91_\" ><thead>    <tr>        <th class=\"blank level0\" ></th>        <th class=\"col_heading level0 col0\" >model_name</th>        <th class=\"col_heading level0 col1\" >train_score</th>        <th class=\"col_heading level0 col2\" >validate_score</th>        <th class=\"col_heading level0 col3\" >accuracy_difference</th>    </tr></thead><tbody>\n",
       "                <tr>\n",
       "                        <th id=\"T_fef91_level0_row0\" class=\"row_heading level0 row0\" >23</th>\n",
       "                        <td id=\"T_fef91_row0_col0\" class=\"data row0 col0\" >Decision_tree_lemmatized_TFIDF</td>\n",
       "                        <td id=\"T_fef91_row0_col1\" class=\"data row0 col1\" >0.862069</td>\n",
       "                        <td id=\"T_fef91_row0_col2\" class=\"data row0 col2\" >0.720000</td>\n",
       "                        <td id=\"T_fef91_row0_col3\" class=\"data row0 col3\" >0.142069</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_fef91_level0_row1\" class=\"row_heading level0 row1\" >5</th>\n",
       "                        <td id=\"T_fef91_row1_col0\" class=\"data row1 col0\" >Log_reg_stemmed_CV</td>\n",
       "                        <td id=\"T_fef91_row1_col1\" class=\"data row1 col1\" >1.000000</td>\n",
       "                        <td id=\"T_fef91_row1_col2\" class=\"data row1 col2\" >0.640000</td>\n",
       "                        <td id=\"T_fef91_row1_col3\" class=\"data row1 col3\" >0.360000</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_fef91_level0_row2\" class=\"row_heading level0 row2\" >15</th>\n",
       "                        <td id=\"T_fef91_row2_col0\" class=\"data row2 col0\" >SVC_stemmed_TFIDF</td>\n",
       "                        <td id=\"T_fef91_row2_col1\" class=\"data row2 col1\" >1.000000</td>\n",
       "                        <td id=\"T_fef91_row2_col2\" class=\"data row2 col2\" >0.600000</td>\n",
       "                        <td id=\"T_fef91_row2_col3\" class=\"data row2 col3\" >0.400000</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_fef91_level0_row3\" class=\"row_heading level0 row3\" >2</th>\n",
       "                        <td id=\"T_fef91_row3_col0\" class=\"data row3 col0\" >Decision_tree_stemmed_CV</td>\n",
       "                        <td id=\"T_fef91_row3_col1\" class=\"data row3 col1\" >0.913793</td>\n",
       "                        <td id=\"T_fef91_row3_col2\" class=\"data row3 col2\" >0.600000</td>\n",
       "                        <td id=\"T_fef91_row3_col3\" class=\"data row3 col3\" >0.313793</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_fef91_level0_row4\" class=\"row_heading level0 row4\" >24</th>\n",
       "                        <td id=\"T_fef91_row4_col0\" class=\"data row4 col0\" >Random_forest_lemmatized_TFIDF</td>\n",
       "                        <td id=\"T_fef91_row4_col1\" class=\"data row4 col1\" >0.913793</td>\n",
       "                        <td id=\"T_fef91_row4_col2\" class=\"data row4 col2\" >0.600000</td>\n",
       "                        <td id=\"T_fef91_row4_col3\" class=\"data row4 col3\" >0.313793</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_fef91_level0_row5\" class=\"row_heading level0 row5\" >4</th>\n",
       "                        <td id=\"T_fef91_row5_col0\" class=\"data row5 col0\" >KNN_stemmed_CV</td>\n",
       "                        <td id=\"T_fef91_row5_col1\" class=\"data row5 col1\" >0.465517</td>\n",
       "                        <td id=\"T_fef91_row5_col2\" class=\"data row5 col2\" >0.600000</td>\n",
       "                        <td id=\"T_fef91_row5_col3\" class=\"data row5 col3\" >-0.134483</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_fef91_level0_row6\" class=\"row_heading level0 row6\" >6</th>\n",
       "                        <td id=\"T_fef91_row6_col0\" class=\"data row6 col0\" >SVC_OVO_stemmed_CV</td>\n",
       "                        <td id=\"T_fef91_row6_col1\" class=\"data row6 col1\" >0.913793</td>\n",
       "                        <td id=\"T_fef91_row6_col2\" class=\"data row6 col2\" >0.600000</td>\n",
       "                        <td id=\"T_fef91_row6_col3\" class=\"data row6 col3\" >0.313793</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_fef91_level0_row7\" class=\"row_heading level0 row7\" >9</th>\n",
       "                        <td id=\"T_fef91_row7_col0\" class=\"data row7 col0\" >Decision_tree_lemmatized_CV</td>\n",
       "                        <td id=\"T_fef91_row7_col1\" class=\"data row7 col1\" >0.982759</td>\n",
       "                        <td id=\"T_fef91_row7_col2\" class=\"data row7 col2\" >0.600000</td>\n",
       "                        <td id=\"T_fef91_row7_col3\" class=\"data row7 col3\" >0.382759</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_fef91_level0_row8\" class=\"row_heading level0 row8\" >11</th>\n",
       "                        <td id=\"T_fef91_row8_col0\" class=\"data row8 col0\" >KNN_lemmatized_CV</td>\n",
       "                        <td id=\"T_fef91_row8_col1\" class=\"data row8 col1\" >0.517241</td>\n",
       "                        <td id=\"T_fef91_row8_col2\" class=\"data row8 col2\" >0.600000</td>\n",
       "                        <td id=\"T_fef91_row8_col3\" class=\"data row8 col3\" >-0.082759</td>\n",
       "            </tr>\n",
       "            <tr>\n",
       "                        <th id=\"T_fef91_level0_row9\" class=\"row_heading level0 row9\" >18</th>\n",
       "                        <td id=\"T_fef91_row9_col0\" class=\"data row9 col0\" >KNN_bigrams_stemmed_TFIDF</td>\n",
       "                        <td id=\"T_fef91_row9_col1\" class=\"data row9 col1\" >0.724138</td>\n",
       "                        <td id=\"T_fef91_row9_col2\" class=\"data row9 col2\" >0.560000</td>\n",
       "                        <td id=\"T_fef91_row9_col3\" class=\"data row9 col3\" >0.164138</td>\n",
       "            </tr>\n",
       "    </tbody></table>"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x7f8540968f70>"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Sort the df_scores by the top 10 performing models highlights \n",
    "# the best validation score and the lowest difference between \n",
    "# the two.\n",
    "score_df.sort_values(by='validate_score', ascending=False).head(10).style.highlight_max('validate_score').highlight_min('accuracy_difference')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4c69bcbc",
   "metadata": {},
   "source": [
    "# Key Takeaways\n",
    "- Best performing model was a Decision Tree with a Max depth of 3\n",
    "- Alot of models where over fitting, I tried to limit this but our data might just have some commonalities between them\n",
    "- In a seperate notebook I actually used Recursive Feature Engineering to pick the top features and run them for models that suffer from the curse of dimesionality but that **DID NOT** beat this decision tree model. \n",
    "- Moving foward I feel confident that this is our best performing model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "db5330ff",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                   ============== Decisiocion Tree ================           \n",
      "DecisionTreeClassifier(max_depth=3, random_state=123)\n",
      "~~~~~~~~Test Scores~~~~~~~~~\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "          C#       0.36      1.00      0.53         4\n",
      "        HTML       0.75      0.60      0.67         5\n",
      "  JavaScript       1.00      0.40      0.57         5\n",
      "      Python       1.00      0.57      0.73         7\n",
      "\n",
      "    accuracy                           0.62        21\n",
      "   macro avg       0.78      0.64      0.62        21\n",
      "weighted avg       0.82      0.62      0.64        21\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "-------------------------------------------------------------------\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Running the test on unseen data and creating a confusion matrix\n",
    "class_names = ['C#', 'HTML', 'JavaScript','Python' ]\n",
    "make_models_and_print_metrics_test_data(tree_models[tree_df.validate_accuracy.idxmax()], 'Decisiocion Tree', X_train, y_train, X_test, y_test, class_names)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a0d6f9a",
   "metadata": {},
   "source": [
    "# Conclusion \n",
    "- The Decision Tree model with a max depth of 3 on lemmatized data vectorized by TFIDF was our best performing model\n",
    "- It doubled our baseline of 31% , to 62% accuracy when predicting a repos coding langauge. \n",
    "- C# is the culperate of most misclassifications, perhaps because of commonly used terms between the languages,  with some more cleaning we may be able to improve accuracy.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5e25adcb",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
